/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package at.motriv.gui;

import java.util.logging.Logger;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//at.motriv.gui//MasterExplorer//EN",
autostore = false)
public final class MasterExplorerTopComponent extends TopComponent implements ExplorerManager.Provider
{

  private static MasterExplorerTopComponent instance;
  /** path to the icon used by the component and its open action */
  static final String ICON_PATH = "at/motriv/gui/folder.png";
  private static final String PREFERRED_ID = "MasterExplorerTopComponent";
  private static final long serialVersionUID = 1L;
  private final ExplorerManager manager = new ExplorerManager();

  public MasterExplorerTopComponent()
  {
    initComponents();
    setName(NbBundle.getMessage(MasterExplorerTopComponent.class, "CTL_MasterExplorerTopComponent"));
    setToolTipText(NbBundle.getMessage(MasterExplorerTopComponent.class, "HINT_MasterExplorerTopComponent"));
    setIcon(ImageUtilities.loadImage(ICON_PATH, true));
    initTree();
    initActions();
    associateLookup(ExplorerUtils.createLookup(manager, getActionMap()));

  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane1 = new BeanTreeView();

    setLayout(new java.awt.BorderLayout());
    add(jScrollPane1, java.awt.BorderLayout.CENTER);
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane jScrollPane1;
  // End of variables declaration//GEN-END:variables

  /**
   * Gets default instance. Do not use directly: reserved for *.settings files only,
   * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
   * To obtain the singleton instance, use {@link #findInstance}.
   */
  public static synchronized MasterExplorerTopComponent getDefault()
  {
    if (instance == null) {
      instance = new MasterExplorerTopComponent();
    }
    return instance;
  }

  /**
   * Obtain the MasterExplorerTopComponent instance. Never call {@link #getDefault} directly!
   */
  public static synchronized MasterExplorerTopComponent findInstance()
  {
    TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
    if (win == null) {
      Logger.getLogger(MasterExplorerTopComponent.class.getName()).warning(
              "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
      return getDefault();
    }
    if (win instanceof MasterExplorerTopComponent) {
      return (MasterExplorerTopComponent) win;
    }
    Logger.getLogger(MasterExplorerTopComponent.class.getName()).warning(
            "There seem to be multiple components with the '" + PREFERRED_ID
            + "' ID. That is a potential source of errors and unexpected behavior.");
    return getDefault();
  }

  @Override
  public int getPersistenceType()
  {
    return TopComponent.PERSISTENCE_ALWAYS;
  }

  @Override
  public void componentOpened()
  {
    // TODO add custom code on component opening
  }

  @Override
  public void componentClosed()
  {
    // TODO add custom code on component closing
  }

  void writeProperties(java.util.Properties p)
  {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version", "1.0");
    // TODO store your settings
  }

  Object readProperties(java.util.Properties p)
  {
    if (instance == null) {
      instance = this;
    }
    instance.readPropertiesImpl(p);
    return instance;
  }

  private void readPropertiesImpl(java.util.Properties p)
  {
    String version = p.getProperty("version");
    // TODO read your settings according to their version
  }

  @Override
  protected String preferredID()
  {
    return PREFERRED_ID;
  }

  @Override
  public ExplorerManager getExplorerManager()
  {
    return manager;
  }

  private void initTree()
  {
    manager.setRootContext(new ExplorerRootNode());
  }

  private void initActions()
  {
  }
}
