/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package at.motriv.gui.externals;

import at.motriv.datamodel.externals.ExternalKind;
import at.motriv.datamodel.externals.ExternalRepository;
import at.motriv.gui.externals.model.RepositoryListModel;
import at.motriv.gui.helper.ChangeDocumentListener;
import java.awt.Desktop;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import org.openide.util.Exceptions;

final class ExternalsPanel extends JPanel implements ListDataListener
{

  private static final long serialVersionUID = 1L;
  private final ExternalsOptionsPanelController controller;
  private final RepositoryListModel listModel = new RepositoryListModel();

  ExternalsPanel(ExternalsOptionsPanelController controller)
  {
    this.controller = controller;
    initComponents();
    listModel.addListDataListener(this);
    initChangeListener();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    buttonGroup1 = new javax.swing.ButtonGroup();
    jLabel1 = new javax.swing.JLabel();
    jScrollPane1 = new javax.swing.JScrollPane();
    jList1 = new javax.swing.JList();
    btAdd = new javax.swing.JButton();
    btRemove = new javax.swing.JButton();
    jLabel2 = new javax.swing.JLabel();
    jLabel5 = new javax.swing.JLabel();
    edName = new javax.swing.JTextField();
    jCheckBox1 = new javax.swing.JCheckBox();
    jCheckBox2 = new javax.swing.JCheckBox();
    jCheckBox3 = new javax.swing.JCheckBox();
    jCheckBox4 = new javax.swing.JCheckBox();
    jCheckBox5 = new javax.swing.JCheckBox();
    jCheckBox6 = new javax.swing.JCheckBox();
    jLabel7 = new javax.swing.JLabel();
    jScrollPane2 = new javax.swing.JScrollPane();
    edDescription = new javax.swing.JEditorPane();
    rdFile = new javax.swing.JRadioButton();
    rdHttp = new javax.swing.JRadioButton();
    rdDav = new javax.swing.JRadioButton();
    rdInternal = new javax.swing.JRadioButton();

    org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ExternalsPanel.class, "ExternalsPanel.jLabel1.text")); // NOI18N

    jList1.setModel(listModel);
    jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
      public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
        jList1ValueChanged(evt);
      }
    });
    jScrollPane1.setViewportView(jList1);

    btAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/at/motriv/gui/externals/add.png"))); // NOI18N
    org.openide.awt.Mnemonics.setLocalizedText(btAdd, org.openide.util.NbBundle.getMessage(ExternalsPanel.class, "ExternalsPanel.btAdd.text")); // NOI18N
    btAdd.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btAddActionPerformed(evt);
      }
    });

    btRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/at/motriv/gui/externals/delete.png"))); // NOI18N
    org.openide.awt.Mnemonics.setLocalizedText(btRemove, org.openide.util.NbBundle.getMessage(ExternalsPanel.class, "ExternalsPanel.btRemove.text")); // NOI18N

    jLabel2.setLabelFor(edName);
    org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ExternalsPanel.class, "ExternalsPanel.jLabel2.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(ExternalsPanel.class, "ExternalsPanel.jLabel5.text")); // NOI18N

    edName.setText(org.openide.util.NbBundle.getMessage(ExternalsPanel.class, "ExternalsPanel.edName.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jCheckBox1, org.openide.util.NbBundle.getMessage(ExternalsPanel.class, "ExternalsPanel.jCheckBox1.text")); // NOI18N
    jCheckBox1.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jCheckBox1StateChanged(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(jCheckBox2, org.openide.util.NbBundle.getMessage(ExternalsPanel.class, "ExternalsPanel.jCheckBox2.text")); // NOI18N
    jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBox2ActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(jCheckBox3, org.openide.util.NbBundle.getMessage(ExternalsPanel.class, "ExternalsPanel.jCheckBox3.text")); // NOI18N
    jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBox3ActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(jCheckBox4, org.openide.util.NbBundle.getMessage(ExternalsPanel.class, "ExternalsPanel.jCheckBox4.text")); // NOI18N
    jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBox4ActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(jCheckBox5, org.openide.util.NbBundle.getMessage(ExternalsPanel.class, "ExternalsPanel.jCheckBox5.text")); // NOI18N
    jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBox5ActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(jCheckBox6, org.openide.util.NbBundle.getMessage(ExternalsPanel.class, "ExternalsPanel.jCheckBox6.text")); // NOI18N
    jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBox6ActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(ExternalsPanel.class, "ExternalsPanel.jLabel7.text")); // NOI18N

    edDescription.setContentType(org.openide.util.NbBundle.getMessage(ExternalsPanel.class, "ExternalsPanel.edDescription.contentType")); // NOI18N
    edDescription.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
      public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
        edDescriptionHyperlinkUpdate(evt);
      }
    });
    jScrollPane2.setViewportView(edDescription);

    buttonGroup1.add(rdFile);
    org.openide.awt.Mnemonics.setLocalizedText(rdFile, org.openide.util.NbBundle.getMessage(ExternalsPanel.class, "ExternalsPanel.rdFile.text")); // NOI18N

    buttonGroup1.add(rdHttp);
    org.openide.awt.Mnemonics.setLocalizedText(rdHttp, org.openide.util.NbBundle.getMessage(ExternalsPanel.class, "ExternalsPanel.rdHttp.text")); // NOI18N

    buttonGroup1.add(rdDav);
    org.openide.awt.Mnemonics.setLocalizedText(rdDav, org.openide.util.NbBundle.getMessage(ExternalsPanel.class, "ExternalsPanel.rdDav.text")); // NOI18N

    buttonGroup1.add(rdInternal);
    org.openide.awt.Mnemonics.setLocalizedText(rdInternal, org.openide.util.NbBundle.getMessage(ExternalsPanel.class, "ExternalsPanel.rdInternal.text")); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
          .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
          .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
            .addComponent(btAdd)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(btRemove))
          .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
            .addGap(78, 78, 78)
            .addComponent(jLabel2)
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createSequentialGroup()
                .addComponent(rdFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdHttp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdDav)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdInternal))
              .addComponent(edName, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)))
          .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
            .addGap(29, 29, 29)
            .addComponent(jLabel7)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE))
          .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel5)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jCheckBox1)
              .addComponent(jCheckBox2)
              .addComponent(jCheckBox3))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jCheckBox5)
              .addComponent(jCheckBox6)
              .addComponent(jCheckBox4))))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(btAdd)
              .addComponent(btRemove)))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(jLabel2)
              .addComponent(edName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(rdFile)
              .addComponent(rdHttp)
              .addComponent(rdDav)
              .addComponent(rdInternal))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabel5)
              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(layout.createSequentialGroup()
                  .addComponent(jCheckBox1)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jCheckBox2)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jCheckBox3))
                .addGroup(layout.createSequentialGroup()
                  .addComponent(jCheckBox4)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jCheckBox5)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jCheckBox6))))
            .addGap(8, 8, 8)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabel7)
              .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))))
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents

  private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_jList1ValueChanged
  {//GEN-HEADEREND:event_jList1ValueChanged
    if (!evt.getValueIsAdjusting()) {
      listModel.setSelectedItem(jList1.getSelectedValue());
    }
  }//GEN-LAST:event_jList1ValueChanged

  private void edDescriptionHyperlinkUpdate(javax.swing.event.HyperlinkEvent evt)//GEN-FIRST:event_edDescriptionHyperlinkUpdate
  {//GEN-HEADEREND:event_edDescriptionHyperlinkUpdate
    if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
      try {
        Desktop.getDesktop().browse(evt.getURL().toURI());
      } catch (URISyntaxException ex) {
        Exceptions.printStackTrace(ex);
      } catch (IOException ex) {
        Exceptions.printStackTrace(ex);
      }
    }
  }//GEN-LAST:event_edDescriptionHyperlinkUpdate

  private void btAddActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btAddActionPerformed
  {//GEN-HEADEREND:event_btAddActionPerformed
    listModel.createNew();
  }//GEN-LAST:event_btAddActionPerformed

  private void jCheckBox1StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jCheckBox1StateChanged
  {//GEN-HEADEREND:event_jCheckBox1StateChanged
    if (isSelectionMutable()) {
      if (jCheckBox1.isSelected()) {
        listModel.getSelectedItem().addKind(ExternalKind.IMAGE);
      } else {
        listModel.getSelectedItem().removeKind(ExternalKind.IMAGE);
      }
    }
  }//GEN-LAST:event_jCheckBox1StateChanged

  private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBox2ActionPerformed
  {//GEN-HEADEREND:event_jCheckBox2ActionPerformed
    if (isSelectionMutable()) {
      if (jCheckBox2.isSelected()) {
        listModel.getSelectedItem().addKind(ExternalKind.SOUND);
      } else {
        listModel.getSelectedItem().removeKind(ExternalKind.SOUND);
      }
    }
  }//GEN-LAST:event_jCheckBox2ActionPerformed

  private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBox3ActionPerformed
  {//GEN-HEADEREND:event_jCheckBox3ActionPerformed
    if (isSelectionMutable()) {
      if (jCheckBox3.isSelected()) {
        listModel.getSelectedItem().addKind(ExternalKind.SPARE_PART_INFO);
      } else {
        listModel.getSelectedItem().removeKind(ExternalKind.SPARE_PART_INFO);
      }
    }
  }//GEN-LAST:event_jCheckBox3ActionPerformed

  private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBox4ActionPerformed
  {//GEN-HEADEREND:event_jCheckBox4ActionPerformed
    if (isSelectionMutable()) {
      if (jCheckBox4.isSelected()) {
        listModel.getSelectedItem().addKind(ExternalKind.DECODER_DESCRIPTION);
      } else {
        listModel.getSelectedItem().removeKind(ExternalKind.DECODER_DESCRIPTION);
      }
    }
  }//GEN-LAST:event_jCheckBox4ActionPerformed

  private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBox5ActionPerformed
  {//GEN-HEADEREND:event_jCheckBox5ActionPerformed
    if (isSelectionMutable()) {
      listModel.getSelectedItem().addKind(ExternalKind.PARAMETER);
    } else {
      listModel.getSelectedItem().removeKind(ExternalKind.PARAMETER);
    }
  }//GEN-LAST:event_jCheckBox5ActionPerformed

  private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBox6ActionPerformed
  {//GEN-HEADEREND:event_jCheckBox6ActionPerformed
    if (isSelectionMutable()) {
      if (jCheckBox6.isSelected()) {
        listModel.getSelectedItem().addKind(ExternalKind.DOCUMENT);
      } else {
        listModel.getSelectedItem().removeKind(ExternalKind.DOCUMENT);
      }
    }
  }//GEN-LAST:event_jCheckBox6ActionPerformed

  void load()
  {
    listModel.refresh();
    listModel.setSelectedItem(null);
    showSelectedItem();
  }

  void store()
  {
    listModel.store();
    // TODO store modified settings
    // Example:
    // Preferences.userNodeForPackage(ExternalsPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
    // or for org.openide.util with API spec. version >= 7.4:
    // NbPreferences.forModule(ExternalsPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
    // or:
    // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
  }

  boolean valid()
  {
    // TODO check whether form is consistent and complete
    return true;
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btAdd;
  private javax.swing.JButton btRemove;
  private javax.swing.ButtonGroup buttonGroup1;
  private javax.swing.JEditorPane edDescription;
  private javax.swing.JTextField edName;
  private javax.swing.JCheckBox jCheckBox1;
  private javax.swing.JCheckBox jCheckBox2;
  private javax.swing.JCheckBox jCheckBox3;
  private javax.swing.JCheckBox jCheckBox4;
  private javax.swing.JCheckBox jCheckBox5;
  private javax.swing.JCheckBox jCheckBox6;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JList jList1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JRadioButton rdDav;
  private javax.swing.JRadioButton rdFile;
  private javax.swing.JRadioButton rdHttp;
  private javax.swing.JRadioButton rdInternal;
  // End of variables declaration//GEN-END:variables

  private void showSelectedItem()
  {
    ExternalRepository rep = listModel.getSelectedItem();
    boolean immutable = true;
    if (rep != null) {
      edName.setText(rep.getName());
      jCheckBox1.setSelected(rep.getKinds().contains(ExternalKind.IMAGE));
      jCheckBox2.setSelected(rep.getKinds().contains(ExternalKind.SOUND));
      jCheckBox3.setSelected(rep.getKinds().contains(ExternalKind.SPARE_PART_INFO));
      jCheckBox4.setSelected(rep.getKinds().contains(ExternalKind.DECODER_DESCRIPTION));
      jCheckBox5.setSelected(rep.getKinds().contains(ExternalKind.PARAMETER));
      jCheckBox6.setSelected(rep.getKinds().contains(ExternalKind.DOCUMENT));
      edDescription.setText(rep.getDescription(Locale.getDefault()));
      immutable = rep.isImmutable();
    } else {
      edName.setText(null);
      jCheckBox1.setSelected(false);
      jCheckBox1.setSelected(false);
      jCheckBox2.setSelected(false);
      jCheckBox3.setSelected(false);
      jCheckBox4.setSelected(false);
      jCheckBox5.setSelected(false);
      jCheckBox6.setSelected(false);
      edDescription.setText(null);
    }
    edName.setEditable(!immutable);
    edDescription.setEditable(!immutable);
    jCheckBox1.setEnabled(!immutable);
    jCheckBox2.setEnabled(!immutable);
    jCheckBox3.setEnabled(!immutable);
    jCheckBox4.setEnabled(!immutable);
    jCheckBox5.setEnabled(!immutable);
    jCheckBox6.setEnabled(!immutable);
    setControlState();
  }

  @Override
  public void intervalAdded(ListDataEvent e)
  {
  }

  @Override
  public void intervalRemoved(ListDataEvent e)
  {
  }

  @Override
  public void contentsChanged(ListDataEvent e)
  {
    if (e.getIndex0() == e.getIndex1() && e.getIndex0() == -1) {
      jList1.setSelectedValue(listModel.getSelectedItem(), true);
      showSelectedItem();
    }
  }

  private void setControlState()
  {
    btRemove.setEnabled(isSelectionMutable());
  }

  private void initChangeListener()
  {
    edName.getDocument().addDocumentListener(new ChangeDocumentListener()
    {

      @Override
      protected void changed(DocumentEvent e)
      {
        if (isSelectionMutable()) {
          if (checkDuplicateName(edName.getText())) {
            listModel.getSelectedItem().setName(edName.getText());
          }
        }
      }
    });
    edDescription.getDocument().addDocumentListener(new ChangeDocumentListener()
    {

      @Override
      protected void changed(DocumentEvent e)
      {
        if (isSelectionMutable()) {
          if (edDescription.getText() != null && edDescription.getText().trim().length() > 0) {
            listModel.getSelectedItem().addDescription(null, edDescription.getText());
          } else {
            listModel.getSelectedItem().removeDescription(null);
          }
        }
      }
    });
  }

  private boolean checkDuplicateName(String name)
  {
    int checkResult = listModel.checkName(name);
    return checkResult == -1 || checkResult == jList1.getSelectedIndex();
  }

  private boolean isSelectionMutable()
  {
    return listModel.getSelectedItem() != null && !listModel.getSelectedItem().isImmutable();
  }
}
