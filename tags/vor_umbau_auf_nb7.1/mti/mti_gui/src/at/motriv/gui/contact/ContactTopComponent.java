/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package at.motriv.gui.contact;

import at.motriv.datamodel.MotrivItemProviderLookup;
import at.motriv.datamodel.entities.contact.Contact;
import at.motriv.datamodel.entities.contact.ContactItemProvider;
import at.mountainsd.dataprovider.api.DataProviderException;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import javax.swing.SwingUtilities;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.cookies.SaveCookie;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.RequestProcessor;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//at.motriv.gui.contact//ContactTopComponent//EN", autostore = false)
public final class ContactTopComponent extends TopComponent
{

  private static final Map<UUID, ContactTopComponent> openedComponents = new HashMap<UUID, ContactTopComponent>();
  /** path to the icon used by the component and its open action */
  static final String ICON_PATH = "at/motriv/gui/contact/vcard.png";
  private static final String PREFERRED_ID = "ContactTopComponentTopComponent";
  private static final long serialVersionUID = 1L;
  private ContactNode node;

  public ContactTopComponent()
  {
    initComponents();
    setName(NbBundle.getMessage(ContactTopComponent.class, "CTL_ContactTopComponentTopComponent"));
    setToolTipText(NbBundle.getMessage(ContactTopComponent.class, "HINT_ContactTopComponentTopComponent"));
    setIcon(ImageUtilities.loadImage(ICON_PATH, true));

  }

  private Contact getCurrent()
  {
    return contactPanel1.getBuilder();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    contactPanel1 = new at.motriv.gui.contact.ContactPanel();

    contactPanel1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
      public void propertyChange(java.beans.PropertyChangeEvent evt) {
        contactPanel1PropertyChange(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(contactPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(contactPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents

  private void contactPanel1PropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_contactPanel1PropertyChange
  {//GEN-HEADEREND:event_contactPanel1PropertyChange
    if (ContactPanel.PROP_MODIFIED.equals(evt.getPropertyName()) || ContactPanel.PROP_DATAVALID.equals(evt.getPropertyName())) {
      if (contactPanel1.isModified() && contactPanel1.isDataValid()) {
        node.setDirty(new SaveCookie()
        {

          @Override
          public void save() throws IOException
          {
            RequestProcessor.getDefault().execute(new Runnable()
            {

              @Override
              public void run()
              {
                try {
                  contactPanel1.getBuilder().save();
                } catch (DataProviderException ex) {
                  Exceptions.printStackTrace(ex);
                }
              }
            });
          }
        });
      } else {
        node.setDirty(null);
      }
      setCaption();
    }
  }//GEN-LAST:event_contactPanel1PropertyChange
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private at.motriv.gui.contact.ContactPanel contactPanel1;
  // End of variables declaration//GEN-END:variables

  /**
   * Gets default instance. Do not use directly: reserved for *.settings files only,
   * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
   * To obtain the singleton instance, use {@link #findInstance}.
   */
  /**
   * Obtain the ContactTopComponent instance. Never call {@link #getDefault} directly!
   */
  @Override
  public int getPersistenceType()
  {
    return TopComponent.PERSISTENCE_ONLY_OPENED;
  }

  @Override
  public void componentOpened()
  {
    // TODO add custom code on component opening
  }

  @Override
  public void componentClosed()
  {
    if (getCurrent() != null) {
      openedComponents.remove(getCurrent().getId());
    }
    setActivatedNodes(new Node[]{});
  }

  void writeProperties(java.util.Properties p)
  {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version", "1.0");
    p.setProperty("opened_id", getCurrent().getId().toString());
  }

  Object readProperties(java.util.Properties p)
  {
    String prop = p.getProperty("opened_id");
    if (prop == null) {
      throw new IllegalStateException("prop==null");
    }
    final UUID id = UUID.fromString(prop);
    RequestProcessor.getDefault().execute(new Runnable()
    {

      @Override
      public void run()
      {
        try {
          ContactItemProvider provider = MotrivItemProviderLookup.lookup(ContactItemProvider.class);
          final Contact loc = provider.get(id);
          SwingUtilities.invokeLater(new Runnable()
          {

            @Override
            public void run()
            {
              if (loc == null) {
                close();
              } else {
                init(new ContactNode(loc));
              }
            }
          });
        } catch (DataProviderException ex) {
          Exceptions.printStackTrace(ex);
        }
      }
    });
    return this;
  }

  private static ContactTopComponent findInstance(ContactNode init)
  {
    UUID i = init.getLookup().lookup(UUID.class);
    if (i != null) {
      return openedComponents.get(i);
    }
    return null;
  }

  public static void execute(ContactNode init)
  {
    ContactTopComponent tc = findInstance(init);
    if (tc == null) {
      tc = new ContactTopComponent();
      tc.init(init);
      tc.open();
    }
    tc.requestActive();
  }

  private void init(ContactNode init)
  {
    this.node = init;
    Contact current = init.getLookup().lookup(Contact.class);
    contactPanel1.setContact(current);
    checkDirty();
    this.setActivatedNodes(new Node[]{node});
    ContactTopComponent last = openedComponents.put(current.getId(), this);
    if (last != null) {
      throw new IllegalStateException(MessageFormat.format("There is already an openend Window with contact {0}", current.getName()));
    }
    setCaption();
  }

  private void checkDirty()
  {
  }

  @Override
  protected String preferredID()
  {
    return PREFERRED_ID;
  }

  private void setCaption()
  {
    DirtyMutableContact current = contactPanel1.getBuilder();
    if (current != null) {
      setHtmlDisplayName(NbBundle.getMessage(ContactTopComponent.class,
                                             "ContactTopComponent.htmlDisplayName",
                                             current.getName(),
                                             current.isDirty() ? "<b>" : "",
                                             current.isDirty() ? " *" : ""));
    }
  }
}
