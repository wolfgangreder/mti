/*
 * $Id$
 *
 * Author Wolfgang Reder
 *
 * Copyright 2014 Wolfgang Reder
 *
 */
package at.reder.mti.ui.contact;

import at.reder.mti.api.datamodel.Contact;
import at.reder.mti.api.datamodel.ContactType;
import at.reder.mti.api.persistence.ProviderException;
import at.reder.mti.ui.contact.model.ContactTypeCheckBoxModel;
import at.reder.mti.ui.controls.CommitableAndErrorFlagableContainer;
import at.reder.mti.ui.controls.NodeContainerSupport;
import at.reder.mti.ui.nodes.ContactNode;
import at.reder.mti.ui.nodes.MTIContactNode;
import java.awt.event.ActionEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.lang.ref.WeakReference;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import javax.swing.DefaultComboBoxModel;
import javax.swing.SwingUtilities;
import org.openide.nodes.NodeEvent;
import org.openide.nodes.NodeListener;
import org.openide.nodes.NodeMemberEvent;
import org.openide.nodes.NodeReorderEvent;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.util.WeakListeners;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@TopComponent.Description(
        preferredID = "EditContactTopComponent",
        iconBase = "at/reder/mti/ui/contact/vcard.png",
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@Messages({
  "CTL_EditContactAction=EditContact",
  "# {0} - lastName",
  "# {1} - firstName",
  "# {2} - fmtStart",
  "# {3} - fmtEnd",
  "# {4} - nameSuffix",
  "CTL_EditContactTopComponent=<html>{2}{0} {1}{4}{3}",
  "HINT_EditContactTopComponent=This is a EditContact window",})
public final class EditContactTopComponent extends TopComponent
{

  private final ContactNode node;
  private final ContactTypeCheckBoxModel ctModel = new ContactTypeCheckBoxModel();
  private final NodeContainerSupport ncs = new NodeContainerSupport(this);
  private final CommitableAndErrorFlagableContainer cec;
  private static final Map<UUID, WeakReference<EditContactTopComponent>> instances = new HashMap<>();
  private final NodeListener myNodeListener = new NodeListener()
  {

    @Override
    public void childrenAdded(NodeMemberEvent ev)
    {
    }

    @Override
    public void childrenRemoved(NodeMemberEvent ev)
    {
    }

    @Override
    public void childrenReordered(NodeReorderEvent ev)
    {
    }

    @Override
    public void nodeDestroyed(NodeEvent ev)
    {
      SwingUtilities.invokeLater(EditContactTopComponent.this::close);
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt)
    {
    }

  };
  private final NodeListener weakListener;
  private final DefaultComboBoxModel<String> countryModel = new DefaultComboBoxModel<>(
          new String[]{"Ã–sterreich", "Deutschland", "Schweiz"});

  public static EditContactTopComponent getInstance(Contact.Builder c)
  {
    return getInstance(MTIContactNode.getInstance().createNode(c));
  }

  public static EditContactTopComponent getInstance(ContactNode node)
  {
    assert SwingUtilities.isEventDispatchThread();
    WeakReference<EditContactTopComponent> ref = instances.get(node.getId());
    EditContactTopComponent comp = ref != null ? ref.get() : null;
    if (comp == null) {
      comp = new EditContactTopComponent(node);
      instances.put(node.getId(), new WeakReference<>(comp));
    }
    return comp;
  }

  private EditContactTopComponent(ContactNode node)
  {
    assert node != null && node.getCurrent() != null;
    this.node = node;
    assert this.node != null;
    ncs.addNodes(Collections.singleton(this.node));
    cec = new CommitableAndErrorFlagableContainer(this);
    initComponents();
//    setToolTipText(Bundle.HINT_EditContactTopComponent());
    assignValues(node.getCurrent());
    cec.addPropertyChangeListener((PropertyChangeListener) this::checkData);
    updateWindowCaption();
    weakListener = WeakListeners.create(NodeListener.class, myNodeListener, node);
    node.addNodeListener(weakListener);
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
   * this method is always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
    final javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
    javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
    javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
    javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
    javax.swing.JLabel jLabel6 = new javax.swing.JLabel();
    javax.swing.JLabel jLabel7 = new javax.swing.JLabel();

    org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(EditContactTopComponent.class, "EditContactTopComponent.jLabel1.text")); // NOI18N

    contactType.setMinimumSize(new java.awt.Dimension(10, 24));
    contactType.setModel(ctModel);
    contactType.setPreferredSize(new java.awt.Dimension(100, 24));
    contactType.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING));

    edLastName.setMinLength(1);
    edLastName.setNullAllowed(false);
    edLastName.setTrimText(true);
    edLastName.addActionListener((ActionEvent evt)->updateWindowCaption());

    org.openide.awt.Mnemonics.setLocalizedText(lbId, org.openide.util.NbBundle.getMessage(EditContactTopComponent.class, "EditContactTopComponent.lbId.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(EditContactTopComponent.class, "EditContactTopComponent.jLabel2.text")); // NOI18N

    jLabel3.setLabelFor(edAddress1);
    jLabel3.setText(org.openide.util.NbBundle.getMessage(EditContactTopComponent.class, "EditContactTopComponent.jLabel3.text")); // NOI18N

    jLabel5.setLabelFor(edZIP);
    org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(EditContactTopComponent.class, "EditContactTopComponent.jLabel5.text")); // NOI18N

    edZIP.setColumns(10);
    edZIP.setMaxLength(10);

    org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(EditContactTopComponent.class, "EditContactTopComponent.jLabel4.text")); // NOI18N

    cbCountry.setEditable(true);
    cbCountry.setModel(countryModel);

    org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(EditContactTopComponent.class, "EditContactTopComponent.jLabel6.text")); // NOI18N

    edFirstName.addActionListener((ActionEvent evt)->updateWindowCaption());

    jLabel7.setLabelFor(edWWW);
    org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(EditContactTopComponent.class, "EditContactTopComponent.jLabel7.text")); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(lbId)
        .addContainerGap())
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(jLabel6)
          .addComponent(jLabel4)
          .addComponent(jLabel5)
          .addComponent(jLabel3)
          .addComponent(jLabel1)
          .addComponent(jLabel2)
          .addComponent(jLabel7))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(edWWW, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(layout.createSequentialGroup()
            .addComponent(edZIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(edCity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
          .addComponent(edAddress2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(contactType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(edLastName, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
          .addComponent(edAddress1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(cbCountry, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(edFirstName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addGap(137, 137, 137))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel6)
          .addComponent(edFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(edLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(contactType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel3)
          .addComponent(edAddress1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(edAddress2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel5)
          .addComponent(edZIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(edCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel4)
          .addComponent(cbCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(edWWW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel7))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 191, Short.MAX_VALUE)
        .addComponent(lbId)
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private final at.reder.mti.ui.controls.MTIComboBox<String> cbCountry = new at.reder.mti.ui.controls.MTIComboBox<>();
  private final at.reder.mti.ui.controls.EnumCheckbox<ContactType> contactType = new at.reder.mti.ui.controls.EnumCheckbox<>();
  private final at.reder.mti.ui.controls.MTITextField edAddress1 = new at.reder.mti.ui.controls.MTITextField();
  private final at.reder.mti.ui.controls.MTITextField edAddress2 = new at.reder.mti.ui.controls.MTITextField();
  private final at.reder.mti.ui.controls.MTITextField edCity = new at.reder.mti.ui.controls.MTITextField();
  private final at.reder.mti.ui.controls.MTITextField edFirstName = new at.reder.mti.ui.controls.MTITextField();
  private final at.reder.mti.ui.controls.MTITextField edLastName = new at.reder.mti.ui.controls.MTITextField();
  private final at.reder.mti.ui.controls.MTIURITextField edWWW = new at.reder.mti.ui.controls.MTIURITextField();
  private final at.reder.mti.ui.controls.MTITextField edZIP = new at.reder.mti.ui.controls.MTITextField();
  private final javax.swing.JLabel lbId = new javax.swing.JLabel();
  // End of variables declaration//GEN-END:variables

  @Override
  public void componentClosed()
  {
    node.setSaveCookie(null);
    node.removeNodeListener(weakListener);
    ncs.removeNode(Collections.singleton(node));
    instances.remove(node.getId());
    if (node.isFloating()) {
      MTIContactNode.getInstance().removeNode(node);
    }
  }

  private void assignValues(Contact c)
  {
    if (c != null) {
      edLastName.setCommitedText(c.getLastName());
      edFirstName.setCommitedText(c.getFirstName());
      lbId.setText(c.getId().toString());
      ctModel.setCommitedSelection(c.getTypes());
      edAddress1.setCommitedText(c.getAddress1());
      edAddress2.setCommitedText(c.getAddress2());
      edCity.setCommitedText(c.getCity());
      edZIP.setCommitedText(c.getZip());
      cbCountry.setCommitedSelection(c.getCountry());
      edWWW.setCommitedValue(c.getWWW());
    } else {
      edLastName.setCommitedText(null);
      edFirstName.setCommitedText(null);
      lbId.setText(null);
      ctModel.setCommitedSelection(null);
      edAddress1.setCommitedText(null);
      edAddress2.setCommitedText(null);
      edCity.setCommitedText(null);
      edZIP.setCommitedText(null);
      cbCountry.setCommitedSelection(null);
      edWWW.setCommitedValue(null);
    }
    checkData(null);
  }

  private Contact getContact()
  {
    Object tmp;
    final String strCountry;
    tmp = cbCountry.getSelectedItem();
    strCountry = tmp != null ? tmp.toString() : null;
    return Lookup.getDefault().lookup(Contact.BuilderFactory.class).createBuilder().
            id(node.getCurrent().getId()).
            lastName(edLastName.getText()).
            firstName(edFirstName.getText()).
            setTypes(ctModel.getSelection()).
            address1(edAddress1.getText()).
            address2(edAddress2.getText()).
            zip(edZIP.getText()).
            city(edCity.getText()).
            country(strCountry).
            www(edWWW.getValue()).
            build();
  }

  private void checkSaveCookie()
  {
    if (cec.isDataValid() && (node.isFloating() || cec.isDataChanged())) {
      node.setSaveCookie(() -> {
        try {
          node.save(getContact());
          cec.commit();
//          isNew = false;
        } catch (ProviderException ex) {
          throw new IOException(ex);
        } finally {
          checkData(null);
        }
      });
    } else {
      node.setSaveCookie(null);
    }
  }

  private void checkData(PropertyChangeEvent prop)
  {
    updateWindowCaption();
    checkSaveCookie();
  }

  private void updateWindowCaption()
  {
    String lastName = edLastName.getText();
    if (lastName == null || lastName.isEmpty()) {
      lastName = "???";
    }
    String firstName = edFirstName.getText();
    if (firstName == null) {
      lastName = "";
    }
    String fmtStart = "";
    String fmtEnd = "";
    String nameSuffix = "";
    if (node.isFloating() || cec.isDataChanged()) {
      nameSuffix = " *";
      if (cec.isDataValid()) {
        fmtStart = "<b>";
        fmtEnd = "</b>";
      } else {
        fmtStart = "<b><font color=\"#cc0000\">";
        fmtEnd = "</font></b>";
      }
    } else { // !isDataChanged
      if (!cec.isDataValid()) {
        fmtStart = "<font color=\"#cc0000\">";
        fmtEnd = "</font>";
      }
    }
    setHtmlDisplayName(Bundle.CTL_EditContactTopComponent(lastName, firstName, fmtStart, fmtEnd, nameSuffix));
  }

}
