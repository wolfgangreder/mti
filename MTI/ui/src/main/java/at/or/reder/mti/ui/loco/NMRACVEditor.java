/*
 * Copyright 2021 Wolfgang Reder.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package at.or.reder.mti.ui.loco;

import at.or.reder.dcc.cv.CVSet;
import at.or.reder.dcc.cv.CVSetProvider;
import at.or.reder.dcc.util.Predicates;
import at.or.reder.mti.model.Locomotive;
import at.or.reder.mti.ui.CVTableModel;
import java.util.Collection;
import java.util.UUID;
import org.openide.util.Lookup;

/**
 *
 * @author Wolfgang Reder
 */
public class NMRACVEditor extends LocoPanel
{

  private final CVTableModel model = new CVTableModel();
  private final CVSet cvSet;

  /** Creates new form NMRACVEditor */
  public NMRACVEditor()
  {
    initComponents();
    Collection<? extends CVSetProvider> providers = Lookup.getDefault().lookupAll(CVSetProvider.class);
    UUID zero = new UUID(0L,
                         0L);
    cvSet = providers.stream().flatMap((p) -> p.getCVSets().stream()).
            filter(Predicates.matches(zero,
                                      CVSet::getId)).
            findAny().orElse(null);
    assert cvSet != null : "Cannot find Basic CVSet";
    assert cvSet.getProvider() != null : "CVSet has no provider";
    model.setCvSet(cvSet);
  }

  @Override
  public void showValues(Locomotive loco)
  {
  }

  @Override
  public void assignValues(Locomotive.Builder builder)
  {
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    jScrollPane1 = new javax.swing.JScrollPane();
    jTable81 = new at.or.reder.swing.JTable8();

    jTable81.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null}
      },
      new String []
      {
        "Title 1", "Title 2", "Title 3", "Title 4"
      }
    ));
    jScrollPane1.setViewportView(jTable81);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane jScrollPane1;
  private at.or.reder.swing.JTable8 jTable81;
  // End of variables declaration//GEN-END:variables
}
