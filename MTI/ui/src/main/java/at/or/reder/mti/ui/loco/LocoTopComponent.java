/*
 * Copyright 2021 wolfi.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package at.or.reder.mti.ui.loco;

import at.or.reder.mti.model.Locomotive;
import at.or.reder.mti.model.QuickInfo;
import at.or.reder.mti.model.api.DefaultQuickInfo;
import at.or.reder.mti.model.api.Factories;
import at.or.reder.mti.model.api.LocoStore;
import at.or.reder.mti.model.api.StoreException;
import at.or.reder.mti.ui.QuickInfoSavable;
import at.or.reder.swing.GlassPaneTopComponent;
import at.or.reder.swing.model.Commitable;
import at.or.reder.swing.model.CommitableAndErrorFlagableContainer;
import at.or.reder.swing.model.Validateable;
import java.beans.PropertyChangeEvent;
import java.io.IOException;
import java.util.UUID;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//at.or.reder.mti.ui//Loco//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "LocoTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "at.or.reder.mti.ui.loco.LocoTopComponent")
@ActionReference(path = "Menu/Window" /* , position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_LocoAction",
        preferredID = "LocoTopComponent"
)
@Messages({
  "CTL_LocoAction=Loco",
  "CTL_LocoTopComponent=Loco Window",
  "HINT_LocoTopComponent=This is a Loco window"
})
public final class LocoTopComponent extends GlassPaneTopComponent
{

  private final CommitableAndErrorFlagableContainer cef;
  private final InstanceContent ic = new InstanceContent();
  private final Lookup lookup = new AbstractLookup(ic);
  private QuickInfoSavable sa;
  private Locomotive loco;
  private UUID id = UUID.randomUUID();

  public LocoTopComponent()
  {
    associateLookup(lookup);
    cef = new CommitableAndErrorFlagableContainer(this);
    cef.addPropertyChangeListener(Commitable.PROP_DATACHANGED,
                                  this::onDataModifiedChanged);
    cef.addPropertyChangeListener(Validateable.PROP_DATAVALID,
                                  this::onDataModifiedChanged);
    initComponents();
    tbMaster.add("NMRA",
                 new NMRACVEditor());
    setName(Bundle.CTL_LocoTopComponent());
    setToolTipText(Bundle.HINT_LocoTopComponent());
  }

  private void onDataModifiedChanged(PropertyChangeEvent evt)
  {
    if (cef.isDataChanged() && cef.isDataValid() && sa == null) {
      sa = new QuickInfoSavable(new DefaultQuickInfo(id,
                                                     null,
                                                     baseInfoPanel1.getLocoName(),
                                                     null),
                                this::saveLoco);
      ic.add(sa);
    } else if (sa != null) {
      ic.remove(sa);
      sa.close();
      sa = null;
    }
  }

  public void setLoco(QuickInfo qi) throws StoreException
  {
    setLoco(qi.getId());
  }

  public void setLoco(UUID id) throws StoreException
  {
    LocoStore store = Factories.getStores().getLocoStore();
    Locomotive loco = store.get(id);
    setLoco(loco);
  }

  public void setLoco(Locomotive loco)
  {
    if (this.loco != null) {
      throw new IllegalStateException("loco already set");
    }
    this.loco = loco;
    id = loco.getId();
    ic.add(loco);
    baseInfoPanel1.showValues(loco);
    cef.checkFlags();
  }

  private void saveLoco() throws IOException
  {
    Locomotive.Builder builder = Factories.getLomotiveBuilderFactory().createBuilder();
    builder.id(id);
    baseInfoPanel1.assignValues(builder);
    try {
      LocoStore store = Factories.getStores().getLocoStore();
      store.store(builder.build());
      setLoco(store.get(id));
    } catch (StoreException ex) {
      throw new IOException(ex);
    }
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    jToolBar1 = new javax.swing.JToolBar();
    jButton1 = new javax.swing.JButton();
    baseInfoPanel1 = new at.or.reder.mti.ui.loco.BaseInfoPanel();

    setLayout(new java.awt.BorderLayout());

    jToolBar1.setFloatable(false);
    jToolBar1.setRollover(true);

    org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(LocoTopComponent.class, "LocoTopComponent.jButton1.text")); // NOI18N
    jButton1.setFocusable(false);
    jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jToolBar1.add(jButton1);

    add(jToolBar1, java.awt.BorderLayout.PAGE_START);

    tbMaster.addTab(org.openide.util.NbBundle.getMessage(LocoTopComponent.class, "LocoTopComponent.baseInfoPanel1.TabConstraints.tabTitle"), baseInfoPanel1); // NOI18N

    add(tbMaster, java.awt.BorderLayout.CENTER);
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private at.or.reder.mti.ui.loco.BaseInfoPanel baseInfoPanel1;
  private javax.swing.JButton jButton1;
  private javax.swing.JToolBar jToolBar1;
  private final javax.swing.JTabbedPane tbMaster = new javax.swing.JTabbedPane();
  // End of variables declaration//GEN-END:variables
  @Override
  public void componentOpened()
  {
    // TODO add custom code on component opening
  }

  @Override
  public void componentClosed()
  {
    if (sa != null) {
      sa.close();
    }
  }

  @Override
  public boolean canClose()
  {
    return !cef.isDataChanged();
  }

  void writeProperties(java.util.Properties p)
  {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version",
                  "1.0");
    // TODO store your settings
  }

  void readProperties(java.util.Properties p)
  {
    String version = p.getProperty("version");
    // TODO read your settings according to their version
  }

}
