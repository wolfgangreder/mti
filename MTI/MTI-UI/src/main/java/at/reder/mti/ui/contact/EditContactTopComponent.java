/*
 * $Id$
 *
 * Author Wolfgang Reder
 *
 * Copyright 2014 Wolfgang Reder
 *
 */
package at.reder.mti.ui.contact;

import at.reder.mti.api.datamodel.Contact;
import at.reder.mti.api.datamodel.ContactType;
import at.reder.mti.api.datamodel.nb.ContactNode;
import at.reder.mti.ui.contact.controls.DefaultEnumCheckboxModel;
import at.reder.mti.ui.contact.controls.EnumCheckbox;
import at.reder.mti.ui.contact.controls.EnumCheckboxModel;
import java.util.UUID;
import javax.swing.DefaultListModel;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@TopComponent.Description(
        preferredID = "EditContactTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@Messages({
  "CTL_EditContactAction=EditContact",
  "CTL_EditContactTopComponent=EditContact Window",
  "HINT_EditContactTopComponent=This is a EditContact window"
})
public final class EditContactTopComponent extends TopComponent
{

  private final ContactNode node;
  private final Contact.Builder builder;
  private final EnumCheckboxModel<ContactType> ctModel = new DefaultEnumCheckboxModel<>(ContactType.class);
  private EnumCheckbox<ContactType> ctPanel;
  private final DefaultListModel<ContactType> listModel = new DefaultListModel<>();

  public EditContactTopComponent(Contact saved)
  {
    this.node = new ContactNode(saved);
    builder = Lookup.getDefault().lookup(Contact.BuilderFactory.class).createBuilder();
    if (saved != null) {
      builder.copy(saved);
    } else {
      builder.id(UUID.randomUUID());
    }
    ctModel.addEnumCheckboxModelListener(this::ctModelChanged);
    ctModel.setOneRequired(true);
    initComponents();
    setName(Bundle.CTL_EditContactTopComponent());
    setToolTipText(Bundle.HINT_EditContactTopComponent());
    assignValues(saved);
  }

  private void ctModelChanged(EnumCheckboxModel<ContactType> model)
  {
    listModel.clear();
    model.getSelection().stream().
            forEach((c) -> {
              listModel.addElement(c);
            });
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
   * this method is always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    jLabel1 = new javax.swing.JLabel();
    final javax.swing.JPanel ctp = ctPanel = new EnumCheckbox<>();
    jScrollPane1 = new javax.swing.JScrollPane();
    jList1 = new javax.swing.JList();

    org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(EditContactTopComponent.class, "EditContactTopComponent.jLabel1.text")); // NOI18N

    jTextField1.setText(org.openide.util.NbBundle.getMessage(EditContactTopComponent.class, "EditContactTopComponent.jTextField1.text")); // NOI18N

    ctPanel.setModel(ctModel);
    ctp.setAlignmentX(0.0F);
    ctp.setMinimumSize(new java.awt.Dimension(200, 24));
    ctp.setPreferredSize(new java.awt.Dimension(200, 24));
    ctp.setLayout(null);

    jList1.setModel(listModel);
    jScrollPane1.setViewportView(jList1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(56, 56, 56))
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(ctp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
      .addGroup(layout.createSequentialGroup()
        .addGap(24, 24, 24)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(ctp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel1))
        .addGap(86, 86, 86))
    );
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel jLabel1;
  private javax.swing.JList jList1;
  private javax.swing.JScrollPane jScrollPane1;
  private final javax.swing.JTextField jTextField1 = new javax.swing.JTextField();
  // End of variables declaration//GEN-END:variables
  @Override
  public void componentOpened()
  {
    // TODO add custom code on component opening
  }

  @Override
  public void componentClosed()
  {
    // TODO add custom code on component closing
  }

  private void assignValues(Contact c)
  {

  }

}
