/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package at.motriv.gui.locomotive;

import at.motriv.gui.ScaleListCellRenderer;
import at.motriv.gui.models.LocomotiveKindComboBoxModel;
import at.motriv.gui.models.ScaleComboBoxModel;
import at.motriv.gui.models.WheelArrangementComboBoxModel;
import java.util.logging.Logger;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//at.motriv.gui.locomotiv//Locomotive//EN",
autostore = false)
public final class LocomotiveTopComponent extends TopComponent
{

  private static final long serialVersionUID = 1L;
  private static LocomotiveTopComponent instance;
  /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
  private static final String PREFERRED_ID = "LocomotiveTopComponent";
  private final LocomotiveKindComboBoxModel kindModel = new LocomotiveKindComboBoxModel();
  private final WheelArrangementComboBoxModel wheelModel = new WheelArrangementComboBoxModel();
  private final ScaleComboBoxModel scaleModel = new ScaleComboBoxModel();

  public LocomotiveTopComponent()
  {
    initComponents();
    setName(NbBundle.getMessage(LocomotiveTopComponent.class, "CTL_LocomotiveTopComponent"));
//    setToolTipText(NbBundle.getMessage(LocomotiveTopComponent.class, "HINT_LocomotiveTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    lbName = new javax.swing.JLabel();
    edName = new javax.swing.JTextField();
    lbDescription = new javax.swing.JLabel();
    jScrollPane1 = new javax.swing.JScrollPane();
    edDescription = new javax.swing.JEditorPane();
    cbKind = new javax.swing.JComboBox();
    lbKind = new javax.swing.JLabel();
    lbWheelArrangement = new javax.swing.JLabel();
    cbWheelArrangement = new javax.swing.JComboBox();
    lbClass = new javax.swing.JLabel();
    edClass = new javax.swing.JTextField();
    lbScale = new javax.swing.JLabel();
    cbScale = new javax.swing.JComboBox();

    lbName.setLabelFor(edName);
    org.openide.awt.Mnemonics.setLocalizedText(lbName, org.openide.util.NbBundle.getMessage(LocomotiveTopComponent.class, "LocomotiveTopComponent.lbName.text")); // NOI18N
    lbName.setToolTipText(org.openide.util.NbBundle.getMessage(LocomotiveTopComponent.class, "LocomotiveTopComponent.lbName.toolTipText")); // NOI18N

    edName.setToolTipText(lbName.getToolTipText());

    lbDescription.setLabelFor(edDescription);
    org.openide.awt.Mnemonics.setLocalizedText(lbDescription, org.openide.util.NbBundle.getMessage(LocomotiveTopComponent.class, "LocomotiveTopComponent.lbDescription.text")); // NOI18N
    lbDescription.setToolTipText(org.openide.util.NbBundle.getMessage(LocomotiveTopComponent.class, "LocomotiveTopComponent.lbDescription.toolTipText")); // NOI18N

    edDescription.setToolTipText(lbDescription.getToolTipText());
    jScrollPane1.setViewportView(edDescription);

    cbKind.setEditable(true);
    cbKind.setModel(kindModel);
    cbKind.setToolTipText(lbKind.getToolTipText());

    lbKind.setLabelFor(cbKind);
    org.openide.awt.Mnemonics.setLocalizedText(lbKind, org.openide.util.NbBundle.getMessage(LocomotiveTopComponent.class, "LocomotiveTopComponent.lbKind.text")); // NOI18N
    lbKind.setToolTipText(org.openide.util.NbBundle.getMessage(LocomotiveTopComponent.class, "LocomotiveTopComponent.lbKind.toolTipText")); // NOI18N

    lbWheelArrangement.setLabelFor(cbWheelArrangement);
    org.openide.awt.Mnemonics.setLocalizedText(lbWheelArrangement, org.openide.util.NbBundle.getMessage(LocomotiveTopComponent.class, "LocomotiveTopComponent.lbWheelArrangement.text")); // NOI18N
    lbWheelArrangement.setToolTipText(org.openide.util.NbBundle.getMessage(LocomotiveTopComponent.class, "LocomotiveTopComponent.lbWheelArrangement.toolTipText")); // NOI18N

    cbWheelArrangement.setEditable(true);
    cbWheelArrangement.setModel(wheelModel);
    cbWheelArrangement.setToolTipText(lbWheelArrangement.getToolTipText());

    org.openide.awt.Mnemonics.setLocalizedText(lbClass, org.openide.util.NbBundle.getMessage(LocomotiveTopComponent.class, "LocomotiveTopComponent.lbClass.text")); // NOI18N
    lbClass.setToolTipText(org.openide.util.NbBundle.getMessage(LocomotiveTopComponent.class, "LocomotiveTopComponent.lbClass.toolTipText")); // NOI18N

    edClass.setToolTipText(lbClass.getToolTipText());

    lbScale.setLabelFor(cbScale);
    org.openide.awt.Mnemonics.setLocalizedText(lbScale, org.openide.util.NbBundle.getMessage(LocomotiveTopComponent.class, "LocomotiveTopComponent.lbScale.text")); // NOI18N
    lbScale.setToolTipText(org.openide.util.NbBundle.getMessage(LocomotiveTopComponent.class, "LocomotiveTopComponent.lbScale.toolTipText")); // NOI18N

    cbScale.setModel(scaleModel);
    cbScale.setRenderer(new ScaleListCellRenderer());

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(lbName)
            .addGap(61, 61, 61)
            .addComponent(edName, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(336, Short.MAX_VALUE))
          .addGroup(layout.createSequentialGroup()
            .addComponent(lbDescription)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1)
            .addGap(336, 336, 336))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(lbKind)
              .addComponent(lbClass)
              .addComponent(lbWheelArrangement)
              .addComponent(lbScale))
            .addGap(34, 34, 34)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(cbScale, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(edClass)
              .addComponent(cbKind, 0, 249, Short.MAX_VALUE)
              .addComponent(cbWheelArrangement, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap(336, Short.MAX_VALUE))))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(lbName)
          .addComponent(edName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(cbKind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(lbKind))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(lbClass)
          .addComponent(edClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(cbWheelArrangement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(lbWheelArrangement))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(lbScale)
          .addComponent(cbScale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 190, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(lbDescription)
          .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(132, 132, 132))
    );
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JComboBox cbKind;
  private javax.swing.JComboBox cbScale;
  private javax.swing.JComboBox cbWheelArrangement;
  private javax.swing.JTextField edClass;
  private javax.swing.JEditorPane edDescription;
  private javax.swing.JTextField edName;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JLabel lbClass;
  private javax.swing.JLabel lbDescription;
  private javax.swing.JLabel lbKind;
  private javax.swing.JLabel lbName;
  private javax.swing.JLabel lbScale;
  private javax.swing.JLabel lbWheelArrangement;
  // End of variables declaration//GEN-END:variables

  /**
   * Gets default instance. Do not use directly: reserved for *.settings files only,
   * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
   * To obtain the singleton instance, use {@link #findInstance}.
   */
  public static synchronized LocomotiveTopComponent getDefault()
  {
    if (instance == null) {
      instance = new LocomotiveTopComponent();
    }
    return instance;
  }

  /**
   * Obtain the LocomotiveTopComponent instance. Never call {@link #getDefault} directly!
   */
  public static synchronized LocomotiveTopComponent findInstance()
  {
    TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
    if (win == null) {
      Logger.getLogger(LocomotiveTopComponent.class.getName()).warning(
              "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
      return getDefault();
    }
    if (win instanceof LocomotiveTopComponent) {
      return (LocomotiveTopComponent) win;
    }
    Logger.getLogger(LocomotiveTopComponent.class.getName()).warning(
            "There seem to be multiple components with the '" + PREFERRED_ID
            + "' ID. That is a potential source of errors and unexpected behavior.");
    return getDefault();
  }

  @Override
  public int getPersistenceType()
  {
    return TopComponent.PERSISTENCE_ONLY_OPENED;
  }

  @Override
  protected void componentActivated()
  {
    kindModel.refresh();
    wheelModel.refresh();
    scaleModel.refresh();
  }

  @Override
  public void componentOpened()
  {
    // TODO add custom code on component opening
  }

  @Override
  public void componentClosed()
  {
    // TODO add custom code on component closing
  }

  void writeProperties(java.util.Properties p)
  {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version", "1.0");
    // TODO store your settings
  }

  Object readProperties(java.util.Properties p)
  {
    if (instance == null) {
      instance = this;
    }
    instance.readPropertiesImpl(p);
    return instance;
  }

  private void readPropertiesImpl(java.util.Properties p)
  {
    String version = p.getProperty("version");
    // TODO read your settings according to their version
  }

  @Override
  protected String preferredID()
  {
    return PREFERRED_ID;
  }
}
